// Code generated by go-swagger; DO NOT EDIT.

package title_parameter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTitleParams creates a new GetTitleParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetTitleParams() *GetTitleParams {
	return &GetTitleParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetTitleParamsWithTimeout creates a new GetTitleParams object
// with the ability to set a timeout on a request.
func NewGetTitleParamsWithTimeout(timeout time.Duration) *GetTitleParams {
	return &GetTitleParams{
		timeout: timeout,
	}
}

// NewGetTitleParamsWithContext creates a new GetTitleParams object
// with the ability to set a context for a request.
func NewGetTitleParamsWithContext(ctx context.Context) *GetTitleParams {
	return &GetTitleParams{
		Context: ctx,
	}
}

// NewGetTitleParamsWithHTTPClient creates a new GetTitleParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetTitleParamsWithHTTPClient(client *http.Client) *GetTitleParams {
	return &GetTitleParams{
		HTTPClient: client,
	}
}

/* GetTitleParams contains all the parameters to send to the API endpoint
   for the get title operation.

   Typically these are written to a http.Request.
*/
type GetTitleParams struct {

	/* Callback.

	   JSONP callback name
	*/
	Callback *string

	/* Plot.

	   Return short or full plot
	*/
	Plot *string

	/* R.

	   The response type to return
	*/
	R *string

	/* T.

	   Title of movie or series
	*/
	T string

	/* Type.

	   Return movie or series
	*/
	Type *string

	/* Y.

	   Year of release
	*/
	Y *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get title params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTitleParams) WithDefaults() *GetTitleParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get title params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetTitleParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get title params
func (o *GetTitleParams) WithTimeout(timeout time.Duration) *GetTitleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get title params
func (o *GetTitleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get title params
func (o *GetTitleParams) WithContext(ctx context.Context) *GetTitleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get title params
func (o *GetTitleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get title params
func (o *GetTitleParams) WithHTTPClient(client *http.Client) *GetTitleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get title params
func (o *GetTitleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCallback adds the callback to the get title params
func (o *GetTitleParams) WithCallback(callback *string) *GetTitleParams {
	o.SetCallback(callback)
	return o
}

// SetCallback adds the callback to the get title params
func (o *GetTitleParams) SetCallback(callback *string) {
	o.Callback = callback
}

// WithPlot adds the plot to the get title params
func (o *GetTitleParams) WithPlot(plot *string) *GetTitleParams {
	o.SetPlot(plot)
	return o
}

// SetPlot adds the plot to the get title params
func (o *GetTitleParams) SetPlot(plot *string) {
	o.Plot = plot
}

// WithR adds the r to the get title params
func (o *GetTitleParams) WithR(r *string) *GetTitleParams {
	o.SetR(r)
	return o
}

// SetR adds the r to the get title params
func (o *GetTitleParams) SetR(r *string) {
	o.R = r
}

// WithT adds the t to the get title params
func (o *GetTitleParams) WithT(t string) *GetTitleParams {
	o.SetT(t)
	return o
}

// SetT adds the t to the get title params
func (o *GetTitleParams) SetT(t string) {
	o.T = t
}

// WithType adds the typeVar to the get title params
func (o *GetTitleParams) WithType(typeVar *string) *GetTitleParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get title params
func (o *GetTitleParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithY adds the y to the get title params
func (o *GetTitleParams) WithY(y *int64) *GetTitleParams {
	o.SetY(y)
	return o
}

// SetY adds the y to the get title params
func (o *GetTitleParams) SetY(y *int64) {
	o.Y = y
}

// WriteToRequest writes these params to a swagger request
func (o *GetTitleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Callback != nil {

		// query param callback
		var qrCallback string

		if o.Callback != nil {
			qrCallback = *o.Callback
		}
		qCallback := qrCallback
		if qCallback != "" {

			if err := r.SetQueryParam("callback", qCallback); err != nil {
				return err
			}
		}
	}

	if o.Plot != nil {

		// query param plot
		var qrPlot string

		if o.Plot != nil {
			qrPlot = *o.Plot
		}
		qPlot := qrPlot
		if qPlot != "" {

			if err := r.SetQueryParam("plot", qPlot); err != nil {
				return err
			}
		}
	}

	if o.R != nil {

		// query param r
		var qrR string

		if o.R != nil {
			qrR = *o.R
		}
		qR := qrR
		if qR != "" {

			if err := r.SetQueryParam("r", qR); err != nil {
				return err
			}
		}
	}

	// query param t
	qrT := o.T
	qT := qrT
	if qT != "" {

		if err := r.SetQueryParam("t", qT); err != nil {
			return err
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if o.Y != nil {

		// query param y
		var qrY int64

		if o.Y != nil {
			qrY = *o.Y
		}
		qY := swag.FormatInt64(qrY)
		if qY != "" {

			if err := r.SetQueryParam("y", qY); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
